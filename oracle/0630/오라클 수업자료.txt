사용자명 입력: sys
비밀번호 입력: oracle as sysdba

SQL> show user;
USER은 "SYS"입니다
SQL> alter session set "_oracle_script"=true;

SQL> drop user jspid cascade;

사용자가 삭제되었습니다.

SQL> create user jspid identified by jsppw account unlock;

사용자가 생성되었습니다.

SQL> grant connect, resource to jspid;

권한이 부여되었습니다.

SQL> grant create table, create sequnce to jspid;
grant create table, create sequnce to jspid
                    *
1행에 오류:
ORA-00990: 권한이 부적합합니다


SQL> grant create table, create sequence to jspid;

권한이 부여되었습니다.

SQL> show user;

create table members(
id number primary key, -- unique, not null
name varchar2(30) not null, --반드시 입력
salary number(15,2) default 1000000,
birth date default sysdate, --sysdate:오늘날짜
email varchar2(30)
);

관리자 계정에서 아래 문장 작성
SQL> alter user jspid default tablespace users quota unlimited on users;

사용자가 변경되었습니다.

insert into 테이블명(칼럼1,칼럼2,..) 
values(값1,값2,..);


SQL> insert into members(id,name,salary,birth,email)
       values(1,'제시카',100,to_date('90/12/25'),'aaa@naver.com');

     insert into members(id,name,salary,birth,email)
       values(2,'수영',300,to_date('90/12/25'),'aaa@naver.com');


insert into members(id,name,salary,birth,email)
       values(3,'티파니',700,to_date('85/12/25'),'bbb@naver.com');


insert into members(id,salary,birth,email,name)
       values(4,700,to_date('85/12/25'),'bbb@naver.com','티파니');

insert into members(id,salary,birth,email,name)
       values(5,200,to_date('87/12/25'),'bbb@daum.com','서현');


insert into members(id,salary,birth,email,name)
       values(6,600,to_date('85/1/3'),'abc@naver.com','제시카');

insert into members(salary,birth,id,name)
values(300,'92-07-20',7,'유리');

insert into members(id,name)
values(8,'윤아');

insert into members
values(9,'써니',500,to_date('99-04-12'),'ccc@daum.net');

insert into members
values(10,'아이유',800,to_date('17-05-22'),'abc@daum.net');




primary key에 중복된 데이터 넣으려고 할 때 발생하는 에러 메시지:
ORA-00001: 무결성 제약 조건(JSPID.SYS_C007354)에 위배됩니다

select * from members;

SQL> col name for a10
SQL> col email for a15
SQL> col id for 999



select * from members;

select * from members where id<=5;

--salary가 500이상인 레코드 조회
select * from members where salary>=500;

--salary가 500이상인 레코드의 id,name,salary 조회
select id,name,salary from members where salary>=500;

--생일이 90-1-1 이후인 레코드 조회
select * from members where birth>='90-1-1';

--이름이 제시카 인 레코드 조회
select * from members where name='제시카';


--이름이 제시카가 아닌 레코드 조회
select * from members where name<>'제시카';

-- 아이디가 5이상이면서 급여가 500이상인 레코드 조회
SQL> select * from members
  2  where id>=5 and salary>=500;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         6 제시카            600 85/01/03 abc@naver.com
         8 윤아          1000000 20/06/26
         9 써니              500 99/04/12 ccc@daum.net
        10 아이유            800 17/05/22 abc@daum.net


-- 아이디가 5~8사이인 레코드 조회
SQL> select * from members
  2  where id>=5 and id<=8;

SQL> select * from members
  2  where id between 5 and 8;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         5 서현              200 87/12/25 bbb@daum.com
         6 제시카            600 85/01/03 abc@naver.com
         7 유리              300 92/07/20
         8 윤아          1000000 20/06/26

-- salary가 500~1000사이인 레코드 조회
SQL> select * from members
  2  where salary>=500 and salary<=1000;

SQL> select * from members
  2  where salary between 500 and 1000;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
        10 아이유            800 17/05/22 abc@daum.net
         3 티파니            700 85/12/25 bbb@naver.com
         4 티파니            700 85/12/25 bbb@naver.com
         6 제시카            600 85/01/03 abc@naver.com
         9 써니              500 99/04/12 ccc@daum.net


-- 생일이 80년대인 레코드 조회(80-1-1 ~ 89-12-31)
SQL> select * from members
  2  where birth>='80-1-1' and birth<='89-12-31';

SQL> select * from members
  2  where birth between '80-1-1' and '89-12-31';

SQL> select * from members
  2  where birth like '9%';


       ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         3 티파니            700 85/12/25 bbb@naver.com
         4 티파니            700 85/12/25 bbb@naver.com
         5 서현              200 87/12/25 bbb@daum.com
         6 제시카            600 85/01/03 abc@naver.com



-- salary가 500~1000사이가 아닌 레코드 조회

SQL> select * from members
  2  where not (salary>=500 and salary<=1000);

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         1 제시카            100 90/12/25 aaa@naver.com
         2 수영              300 90/12/25 aaa@naver.com
         5 서현              200 87/12/25 bbb@daum.com
         7 유리              300 92/07/20
         8 윤아          1000000 20/06/26


SQL> select * from members
    where  not salary between 500 and 1000;

SQL> select * from members
  2  where salary<500 or salary>1000;


SQL> select name from members
  2  where name between '사' and '자';

-- name이 아이유, 제시카, 윤아인 레코드 조회
SQL> select * from members
  2  where name='아이유' or name='제시카' or name='윤아';

SQL> select * from members
  2  where name in('아이유','제시카','윤아');

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
        10 아이유            800 17/05/22 abc@daum.net
         1 제시카            100 90/12/25 aaa@naver.com
         6 제시카            600 85/01/03 abc@naver.com
         8 윤아          1000000 20/06/26

-- email이 null인 레코드 조회

SQL> select * from members
  2  where email is null;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         7 유리              300 92/07/20
         8 윤아          1000000 20/06/26


-- email이 null이 아닌 레코드 조회
SQL> select * from members
  2  where email is not null;

--name이 '아'로 시작하는 레코드 조회
SQL> select * from members
  2  where name like '아%';

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
        10 아이유            800 17/05/22 abc@daum.net


% : 0 ~ 무한대
아%
아
아영
아이유
아가나다라

와일드 카드 문자
%아
아
윤아
이경아


%아%
아
윤아
아윤
가나다아라마바


_ : 1글자
아_
아:X
아영:O
영아:X


김_
김석

이_ _
이효리
이진:X

_재_
유재석
재석:X

_정%
김정
김정선
김정선희


name에 유 포함된 레코드 조회
SQL> select * from members
  2  where name like '%유%';

email에 daum포함된 레코드 조회
SQL> select * from members
  2  where email like '%daum%';

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
        10 아이유            800 17/05/22 abc@daum.net
         5 서현              200 87/12/25 bbb@daum.com
         9 써니              500 99/04/12 ccc@daum.net


-- id의 별칭을 번호로 설정(as생략 가능)
SQL> select id as 번호,name as 이름, salary as 급여 from members;



SQL> select id as 번호,name as 이름, salary as 급여, salary*1.1  "총 급여" from members;

  번호 이름             급여    총 급여
------ ---------- ---------- ----------
    10 아이유            800        880
     1 제시카            100        110
     2 수영              300        330
     3 티파니            700        770
     4 티파니            700        770
     5 서현              200        220
     6 제시카            600        660
     7 유리              300        330
     8 윤아          1000000    1100000
     9 써니              500        550



SQL> select name || '의 급여는 ' || salary || '원 입니다'  from members
  2  where salary<=500;

NAME||'의급여는'||SALARY||'원입니다'
--------------------------------------------------------------------------------
제시카의 급여는 100원 입니다
수영의 급여는 300원 입니다
서현의 급여는 200원 입니다
유리의 급여는 300원 입니다
써니의 급여는 500원 입니다

 select * from members
order by 칼럼명 정렬방식
asc : 오름차순(생략가능) 123,ABCD,가나다라
desc : 내림차순 

SQL> select * from members
  2  order by id asc;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         1 제시카            100 90/12/25 aaa@naver.com
         2 수영              300 90/12/25 aaa@naver.com
         3 티파니            700 85/12/25 bbb@naver.com
         4 티파니            700 85/12/25 bbb@naver.com
         5 서현              200 87/12/25 bbb@daum.com
         6 제시카            600 85/01/03 abc@naver.com
         7 유리              300 92/07/20
         8 윤아          1000000 20/06/26
         9 써니              500 99/04/12 ccc@daum.net
        10 아이유            800 17/05/22 abc@daum.net

-- name  가나다 순 정렬
SQL> select * from members
  2  order by name asc;

SQL> select * from members
  2  order by 2 asc;

-- 생일로 1차 오름차순정렬하고 같은 생일이 있을 때 salary로 2차 정렬
SQL> select * from members
  2  order by birth asc, salary asc;

SQL> select * from members
  2  order by birth , salary ;


-- salary가 300~1000 사이인 레코드를 
생일 빠른순으로 나오도록, 같은 생일이 있으면 salary가 높은 레코드가 먼저 나오도록 조회
SQL> select * from members
  2  where salary>=300 and salary<=1000
  3  order by birth asc,salary desc;

SQL> select * from members
  2  where salary between 300 and 1000
  3  order by birth asc,salary desc;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         6 제시카            600 85/01/03 abc@naver.com
         4 티파니            700 85/12/25 bbb@naver.com
         3 티파니            700 85/12/25 bbb@naver.com
         2 수영              300 90/12/25 aaa@naver.com
         7 유리              300 92/07/20
         9 써니              500 99/04/12 ccc@daum.net
        10 아이유            800 17/05/22 abc@daum.net



이름에 '유' 포함된 레코드를 급여 높은게 먼저나오도록 정렬
SQL> select * from members
  2  where name like '%유%'
  3  order by salary desc;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
        10 아이유            800 17/05/22 abc@daum.net
         7 유리              300 92/07/20


생일이 90년대인 레코드 중에 email이 null이 아닌 레코드를 salary가 낮은 것부터 나오도록 조회
SQL> select * from members
  2  where birth>='90-1-1' and birth<'00-1-1' and email is not null
  3  order by salary;

        ID NAME           SALARY BIRTH    EMAIL
---------- ---------- ---------- -------- ---------------
         1 제시카            100 90/12/25 aaa@naver.com
         2 수영              300 90/12/25 aaa@naver.com
         9 써니              500 99/04/12 ccc@daum.net


update 테이블명 set 칼럼명1=값1, 칼럼명2=값2;
update members set salary=500;

-- id가 5인 레코드의 salary를 2000으로 email은 xyz@daum.net 으로 수정
SQL> update members set salary=2000, email='xyz@daum.net'
  2  where id=5;


-- id가 5이상인 레코드의 salary를 50원씩 인상
SQL> update members set salary = salary + 50
  2  where id>=5;

-- id가 4인 레코드의 생일을 77-7-7로 수정
SQL> update members set birth=to_date('77-7-7')
  2  where id=4;

delete from 테이블명;
delete from members;

SQL> delete from members
  2  where id<3;


이름에 '니' 포함된 레코드 삭제
SQL> delete from members
  2  where name like '%니%';
rollback;

생일이 90년대인 레코드 삭제
SQL> delete from members
  2  where birth between '90-1-1' and '99/12/31';
rollback;

email이 null인 레코드 삭제
SQL> delete from members
  2  where email is null;
rollback;


SQL> select * from tab;

TNAME                TABTYPE         CLUSTERID
-------------------- -------------- ----------
BOOK                 TABLE
MEMBERS              TABLE


칼럼명 변경 : rename column~ to
alter table 테이별명 rename column 옛날칼럼 to 새칼럼;
SQL> alter table members rename column id to no;

rollback 안됨
no -> id
SQL> alter table members rename column no to id;

hphone 칼럼 추가 : add
alter table members add(hphone varchar2(13));

hphone 칼럼 속성 변경:modify
SQL> alter table members modify(hphone varchar2(17) );

hphone 칼럼 : drop column
SQL> alter table members drop column hphone;




alter table members add(gender varchar2(4) default '여자');

alter table members add(gender varchar2(6) check(gender in('남자','여자') ) ) ; 
   
insert into members
values(11,'조이',100,'90-1-1','abc@naver.com','여자');


alter table members add(kor number check(kor between 50 and 80 ) );

insert into members
values(12,'웬디',600,'70-8-1','abc@naver.com','남자',70);

id가 1,3,5,7,9 남자
id가 2,4,6,8,10 여자

SQL> update members set gender='남자'
  2  where id=1 or id=3 or id=5 or id=7 or id=9;


SQL> update members set gender='여자'
  2  where id in(2,4,6,8,10);

성별이 남자이면서 salary 100~500인 레코드를 이름 가나다 순으로 정렬 조회
SQL> select * from members
  2  where gender='남자' and salary between 100 and 500
  3  order by name asc;

  ID NAME         SALARY BIRTH    EMAIL           GENDER              KOR
---- -------- ---------- -------- --------------- ------------ ----------
   7 유리            350 92/07/20                 남자
   1 제시카          100 90/12/25 aaa@naver.com   남자




테이블 명 변경 : rename 옛날테이블명 to 새테이블명;
SQL> rename members to abc;



SQL> create table memberCopy as
  2  select * from members
  3  where id>5;

테이블이 생성되었습니다.

SQL> select * from membercopy;

  ID NAME         SALARY BIRTH    EMAIL           GENDER              KOR
---- -------- ---------- -------- --------------- ------------ ----------
   6 제시카          650 85/01/03 abc@naver.com   여자
   7 유리            350 92/07/20                 남자
   8 윤아        1000050 20/06/26                 여자
   9 써니            550 99/04/12 ccc@daum.net    남자
  10 아이유          850 17/05/22 abc@daum.net    여자
  11 조이            100 90/01/01 abc@naver.com   여자
  12 웬디            600 70/08/01 abc@naver.com   남자                 70

====================================
DB table export/import 방법
관리자계정으로 접속
SQL> drop directory dirpump;

SQL> create directory dirpump as 'c:\labs_test\';

디렉토리가 생성되었습니다.

SQL> grant read,write on directory dirpump to jspid;

권한이 부여되었습니다.



cmd창으로 이동

C:\labs_test>expdp parfile=expdp_pump.txt


========================================

SQL> select sum(salary) from members;

SUM(SALARY)
-----------
    1007000



SQL> select avg(salary) as "급여 평균" from members;

 급여 평균
-----------
 83916.6667


SQL> select max(salary) from members;

MAX(SALARY)
-----------
    1000050

SQL> select min(salary) from members;

MIN(SALARY)
-----------
        100


SQL> select count(*) from members;

  COUNT(*)
----------
        12


SQL> select count(*) from members
  2  where gender='남자';

  COUNT(*)
----------
         6


SQL> select count(*) from members
  2  where salary>=1000;

  COUNT(*)
----------
         2

80년대 생 인원수
SQL> select count(*) from members
  2  where birth like '8%';

  COUNT(*)
----------
         3



SQL> select gender from members
  2  group by gender;

GEND
----
여자
남자



SQL> select gender, avg(salary) from members
  2  group by gender;

GEND AVG(SALARY)
---- -----------
여자  167108.333
남자         725




SQL> select gender, max(salary) as "최고 급여",min(salary) "최소 급여", avg(salary) "평균 급여" from members
  2  group by gender;

GEND  최고 급여  최소 급여  평균 급여
---- ---------- ---------- ----------
여자    1000050        100 167108.333
남자       2050        100        725


dept(부서명) 칼럼 추가  

id = 1,3,5,7 dept : 영업부
id = 2,4,9,11 dept : 홍보부
id= 6,8,10,12 dept : 개발부




SQL> alter table members add(dept varchar2(12) default '영업부');

SQL> update members set dept='홍보부'
  2  where id in(2,4,9,11);


SQL> update members set dept='개발부'
  2  where id in(6,8,10,12);

commit;


-- 부서별 인원수 조회
SQL> select dept, count(*) 인원수 from members
  2  group by dept;

DEPT       인원수
------ ----------
개발부          4
영업부          4
홍보부          4

-- 부서별 급여 평균 조회
SQL> select dept, avg(salary) "부서 급여 평균" from members
  2  group by dept;

DEPT   부서 급여 평균
------ --------------
개발부       250537.5
영업부            800
홍보부          412.5


SQL> update members set dept='영업부'
  2  where id=8;
commit;



--부서별 인원수를 부서명 오름차순으로 조회

SQL> select dept,count(*) 인원수
  2  from members
  3  group by dept
  4  order by dept asc;

DEPT       인원수
------ ----------
개발부          3
영업부          5
홍보부          4


--부서별 인원수를 인원수 내림차순으로 조회
SQL> select dept,count(*) 인원수
  2  from members
  3  group by dept
  4  order by 인원수 desc ; -- 인원수 대신 count(*) 가능 

DEPT       인원수
------ ----------
영업부          5
홍보부          4
개발부          3



--부서별 남자 인원수를 인원수 내림차순으로 조회
SQL> select dept,count(*) 인원수
    from members
    where gender='남자'
    group by dept
    order by 인원수 desc ;


DEPT       인원수
------ ----------
영업부          4
홍보부          1
개발부          1



addr(주소) 칼럼 추가
id = 1,4,7,9       addr : 서울
id = 2,3,6,11,12 addr : 제주
id= 5,8,10         addr : 부산

SQL> alter table members add(addr varchar2(10) default '서울');

SQL> update members set addr='제주'
  2  where id in(2,3,6,11,12);

SQL> update members set addr='부산'
  2  where id in(5,8,10);



SQL> select addr,count(*) 인원수
  2  from members
  3  group by addr;

ADDR     인원수
---- ----------
서울          4
부산          3
제주          5


-- 부서별 그룹묶어 급여 평균이 450이상인 레코드 조회

SQL> select addr,count(*) 인원수, avg(salary)
  2  from members
  3  group by addr
  4  having avg(salary)>=450;

ADDR     인원수 AVG(SALARY)
---- ---------- -----------
부산          3  334316.667
제주          5         470


SQL> select addr,count(*) 인원수, avg(salary)
    from members
    where gender='여자'
    group by addr
   having avg(salary)>=450
  order by addr desc;

ADDR     인원수 AVG(SALARY)
---- ---------- -----------
서울          1         700
부산          2      500450


SQL> select avg(salary) from members;

AVG(SALARY)
-----------
 83916.6667

부서별 급여 평균
SQL> select dept,avg(salary)
    from members
    group by dept;

DEPT   AVG(SALARY)
------ -----------
개발부         700
영업부      200650
홍보부       412.5



SQL> select dept,avg(salary)
  2         from members
  3         group by dept
  4      having avg(salary)>=(select avg(salary) from members);

DEPT   AVG(SALARY)
------ -----------
영업부      200650


생일이 90-1-1 이후인 사람만 대상으로 
지역별로 급여 평균을 구하고 
급여 평균이 500이상인 레코드만 조회

SQL> select addr, avg(salary)
  2      from members
  3      where birth>='90-1-1'
  4      group by addr
  5      having avg(salary)>=500;


SQL> select dept, addr, count(*) 인원수
    from members
    group by dept, addr
    order by dept, addr;

DEPT   ADDR     인원수
------ ---- ----------
개발부 부산          1
개발부 제주          2
영업부 부산          2
영업부 서울          2
영업부 제주          1
홍보부 서울          2
홍보부 제주          2


select dept, addr, count(*) 인원수
    from members
    where dept='개발부' and addr='제주'
    group by dept, addr
    order by dept, addr;

DEPT   ADDR     인원수
------ ---- ----------
개발부 제주          2


지역별, 인원별 인원수 조회

SQL> select addr, gender, count(*) 인원수
  2  from members
  3  group by addr, gender;

ADDR GEND     인원수
---- ---- ----------
제주 남자          2
부산 여자          2
서울 여자          1
서울 남자          3
제주 여자          3
부산 남자          1


지역별, 인원별 인원수 조회(2명 이상만 조회)
SQL> select addr, gender, count(*) 인원수
  2  from members
  3  group by addr, gender
  4  having count(*)>=2;

ADDR GEND     인원수
---- ---- ----------
제주 남자          2
부산 여자          2
서울 남자          3
제주 여자          3




